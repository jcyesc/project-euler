package org.algorithms.euler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
 * pentagonal numbers are:
 * 
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 * 
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
 * 70 − 22 = 48, is not pentagonal.
 * 
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
 * difference are pentagonal and D = |Pk − Pj| is minimized; what is the value
 * of D?
 * 
 * How to solve it!
 * 
 * Calculate a huge amount of pentagonal numbers and put them in a map.
 * 
 * Result
 * 
 * Pj = 7042750, Pk = 1560090, |Pk - Pj| = 5482660 
 * Pj = 1560090, Pk = 7042750, |Pk - Pj| = 5482660
 * 
 */
public class Problem44 {

  /**
   * Returns numberOfPentagonals pentagonal numbers. Pn=n(3n−1)/2.
   * 
   * @param numberOfPentagonals
   * @return List<Long>
   */
  public static List<Long> getPentagonalNumbers(int numberOfPentagonals) {
    List<Long> pentagonals = new ArrayList<Long>();

    for (long n = 1; n <= numberOfPentagonals; n++) {
      long pentagonal = n * (3 * n - 1) / 2;
      if (pentagonal < n) {
        System.err.println("ERROR " + pentagonal + " n - " + n);
        break;
      } else {
        // System.out.println(pentagonal);
        pentagonals.add(pentagonal);
      }
    }

    return pentagonals;
  }

  public static void main(String[] args) {
    int numberOfPentagonals = 100000;
    List<Long> pentagonals = getPentagonalNumbers(numberOfPentagonals);
    Map<Long, Long> mapPentagonals = new HashMap<Long, Long>();
    for (Long pentagonal : pentagonals) {
      mapPentagonals.put(pentagonal, pentagonal);
    }
    // System.out.println(pentagonals);
    long minimun = Long.MAX_VALUE;
    for (int i = 0; i < pentagonals.size(); i++) {
      long pentagonal = pentagonals.get(i);
      Set<List<Long>> results = findTwoElements(pentagonal, pentagonals,
          mapPentagonals);

      for (List<Long> sumPentagonal : results) {
        // Checking if the sum is a pentagonal number.
        if (sumPentagonal != null) {
          long pent1 = sumPentagonal.get(0);
          long pent2 = sumPentagonal.get(1);
          long substraction = Math.abs(pent2 - pent1);
          // System.out.println(String.format("SUM Pj = %d, Pk = %d", pent1,
          // pent2));

          // Checking if the substraction is a pentagonal number
          if (mapPentagonals.containsKey(substraction)) {
            // if (binarySearch(substraction, pentagonals) != -1) {
            // D = |Pk − Pj| is minimised;
            System.out.println(String
                .format("Pj = %d, Pk = %d, |Pk - Pj| = %d ", pent1, pent2,
                    substraction));
            minimun = substraction;
          }
        }
      }
    }

    System.out.println("The result is " + minimun + " " + Long.MAX_VALUE);
  }

  /**
   * Finds two elements that sum x. Returns the two elements if found.
   * 
   * , 5, 12, 22, 35, 51, 70, 92, 117, 145,
   * 
   * @param x
   * @param numbers
   *          where the two elements will be searched. It is assumed that the
   *          list is sorted.
   * @param mapNumbers
   *          contains the numbers in the map for fast search.
   * @return a set of two numbers that sum x, if found, otherwise null.
   */
  public static Set<List<Long>> findTwoElements(long x, List<Long> numbers,
      Map<Long, Long> mapNumbers) {
    Set<List<Long>> pairs = new HashSet<List<Long>>();
    for (int i = 0; i < numbers.size(); i++) {
      long num1 = numbers.get(i);
      if (num1 > x) {
        break;
      }

      long num2 = x - num1;
      if (mapNumbers.containsKey(num2)) {
        List<Long> elements = new ArrayList<Long>();
        elements.add(num1);
        elements.add(num2);
        pairs.add(elements);
      }
    }

    return pairs;
  }
}
